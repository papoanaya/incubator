#!/opt/home/papo/bin/newlisp

;; Calendar with Emacs org-mode agenda for  DZen2
;; Inspired by and contributed from the org-awesome module, copyright of Damien Leone 
;; and Alexander Yakushev 
;; Licensed under GPLv2
;; @author Luis R. Anaya


(context 'orglendar)

(setq files '("crap.org"))

(set 'char-width nil)
(set 'text_color  "#FFFFFF")
(set 'today_color  "#00FF00")
(set 'event_color  "#FF0000")
(set 'font  "monospace 8")
(set 'parse_on_show true)
(set 'calendar_width  21)
(set 'limit_todo_length  40)

(set 'calendar nil)
(set 'todo nil)
(set 'offset 0)
(set 'data nil)



(define (comp_agenda x y) 
  (let ((x-date (last x))
        (y-date (last y)))

    (< x-date y-date)))


(define (parse_agenda files) 
  (let ((today (date (date-value) 0 "%Y-%m-%d"))
               (task_name ""))

    (dolist (file files)
            
      (set 'fd (open file "r"))
      (if (nil? fd)
	  (println (format "W: orglendar: cannot find  %s" file))
	  (begin
	    (while (setq line (read-line fd))
		    (setq scheduled (find "SCHEDULED:" line))
		    (setq closed (find "CLOSED:" line))
		    (setq deadline (find "DEADLINE" line))
		    (if (or (and scheduled (not closed))
			    (and deadline (not closed)))
			(begin
			   (setq re (regex {(\d\d\d\d)-(\d\d)-(\d\d)} line))
			   (setq y $1)
			   (setq m $2)
			   (setq d $3)

			   (setq task_date (append y "-" m "-" d))

			   (if (and d task_name (>= task_date today))
			       (let ((find_begin "")
				     (task_start (last (regex {[A-Z]+\s+} task_name))))

				     (if (and task_start  (= find_begin 1))
                         (setq task_name (slice task_name, task_start+1)))

				     (setq tasks (regex {\s+(:.+):} task_name))

                     (if tasks
                         (begin 
                           (setq task_end (nth 1 tasks))
                           (setq task_tags $1))
                         (begin 
                           (setq task_end (+ (length task_name) 1))
                           (setq task_tags "")))

				     (if task_tags 
                         (setq task_name (slice task_name 0 (- task_end 1)))
                         (setq task_tags " "))
  
				     (setq len (+ (length task_name) (length task_tags)))
				     
				     ; Push items to the tasks list, on the first of the data.
				     (push (list task_name (list task_name task_tags task_date) 
                                 (list (int (trim y "0" "")) (int (trim m "0" "")) (int (trim d "0" "")))) data))))
			   
			(begin 
              (setq task_name (regex {^\*+\s+(.+)} line))
              (setq task_name $1) ))))))) 
  (sort data comp_agenda))
  

(define (create_calendar)
  (let ((offset (or offset 0))
        (right-now (date (date-value) 0 "*t"))
        (cal_month (nth 1 (now)))
        (cal_year (nth 0 (now))))
    
	(cond 
	 ((> cal_month 12)
	  (setq cal_month (mod cal_month 12))
	  (setq cal_year (+ cal_year 1)))
	 ((< cal_month 1)
	  (setq cal_month (+ cal_month 12))
	  (setq cal_year (- cal_year 1))) )

	(setq cal_output 
          (exec (format "cal  %d %d"
                        cal_month
                        cal_year)))
    
    (setq last_days
          (map
           (fn (w)
             (let ((w-list  (parse w)))
               (when w-list (last w-list))))
           cal_output))

	(setq last_day    (int (last (filter string? last_days))))
	(setq first_day (date-value  cal_year  cal_month 1))
	(setq first_day_in_week (int  (date first_day 0 "%w")))

	(setq result " Su Mo Tu We Th Fr Sa\n")

	(dotimes (i first_day_in_week)
              (setq result (append result (format "%3s" " "))))

	(for (day 1 last_day)
	     (let ((last_in_week (= (mod (+ day first_day_in_week) 7) 0))
               (day_str (format "%3s" (string day))))

	       (cond
            ((and (= cal_month (nth 1 (now)))
                  (= cal_year (nth 0 (now)))
                  (= day  (nth 2 (now))))
             (begin
               (setq this_month nil)
               (setq result (append result "^fg(yellow)" day_str "^fg()")))) ;needs to be made bold 

            ((not (for-all
                  (fn (data-item)
                    (setq date-item (nth 2 data-item))
                    (if (and
                         (= cal_year (nth 0 date-item))
                         (= cal_month (nth 1 date-item))
                         (= day (nth 2 date-item)))
                        nil
                        true)) data))
              (setq result (append result "^fg(green)" day_str "^fg()"))) ;needs to be made bold 

            (true
             (setq result (append result day_str))))

	       (if (or last_in_week 
                    (= (string day) (string last_day)))
               (setq result (append result "\n"))))) 

	(setq header "")

	(if this_month 
	    (setq header (date (date-value) 0 " %a, %d %b %Y"))
	    (setq header (date first_day 0 " %B %Y")))
	
    
	(append header "\n" result)))


(define (create_todo)
  (let ((result "")
        (maxlen = (+ (length (map first data) 3))))

        (if (and limit_todo_length  
                 (< limit_todo_length max_len))
            (setq maxlen limit_todo_length))
        
        
        (let ((limit 0))
          (dolist (tasks data)
                  (setq working-list (nth 1 tasks))
                  (setq task_re  (regex {([A-Z]+)\s+(.*)} (nth 0 working-list)))
                  (setq task_type $1)
                  (setq task_description $2)

                  (setq result 
                        (append result 
                                (format "^fg(%s)%-5s^fg() %-25s  - %s : %s\n"
                                        (case task_type
                                          ("TODO" "red")
                                          ("DONE" "green")
                                          (true "yellow"))
                                        task_type
                                        task_description
                                        (nth 2 working-list)
                                        (nth 1 working-list))))))

          (if (= result "" )
              " "
              result)))
              
(define (get_calendar_and_todo_text)
  (cond 
   (parse_on_show 
    (begin
      (setq data nil)
      (parse_agenda files)))
   ((not data)
    (parse_agenda)))

  (let ((header nil))
    (append 
     (create_calendar) "\n"
     (create_todo))))

(! (append "echo \"" (get_calendar_and_todo_text)  
           "\"| dzen2 -p 50 -x 0 -y 0 -w 400 -l 20 -ta l -sa l -e 'onstart=uncollapse;button3=exit:13'"))

(context MAIN)
(exit)