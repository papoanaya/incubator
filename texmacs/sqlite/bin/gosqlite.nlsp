#!/usr/bin/env newlisp
# write sqlite within the input line, 
# use as many commands as necessary, 
# divide them by the ~ chararacter, because the ENTER key terminates the input and sends it to gnuplot.
# output is the graph made by gnuplot.

(setq GNUPLOT_PATH "")
;; removed -batch
(setq PIPE_GNUPLOT "/opt/local/bin/sqlite3 -batch ")

(map set '(myin sqout) (pipe))
(map set '(sqin myout) (pipe))

# defining temporary postscript file directory
(setq TMPDIR (env "TMPDIR"))

(if (not (directory TMPDIR))
    (make-dir TMPDIR))

(println (string PIPE_GNUPLOT " " TMPDIR "texmacsdb")) 
(setq pid (process (string PIPE_GNUPLOT " " TMPDIR "texmacsdb") sqin sqout)) 

(setq DATA_BEGIN "\002")
(setq DATA_END "\005")
(setq DATA_ESCAPE "\027")

(print DATA_BEGIN)
(print "verbatim:This is a TeXmacs interface for Sqlite.")

# prompt-input-gnuplot-output loop
(while true
       (begin 
         (print DATA_BEGIN)
         (print "channel:prompt")
         (print DATA_END)
         (print "%]")
         (print DATA_END)        
         (setq input (read-line))
         (setq input (string  (replace "~" input "\n")))
         
;;      (write-file (string TMPDIR "/" "temp.sql") input)
         (print (string input "\n\n"))
         (write myout (string input "\n\n"))

         (print DATA_BEGIN)
         (print "verbatim:")

;;         (! (format "cat %s | %s %s" (string TMPDIR "/temp.sql") PIPE_GNUPLOT (string TMPDIR "/db")))
         (println "before data")
         (println (read-line myin))
;;          (while (setq data (read-line myin)) 
;;                 (write-line data)) 

         (println "after data")

         (print DATA_END)
         (destroy pid)
         ;;         (delete-file (format "%s/%s" TMPDIR "temp.sql"))
         ))

(exit)
